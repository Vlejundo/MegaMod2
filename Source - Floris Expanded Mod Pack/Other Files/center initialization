################ game_script in order:


    #F&B think. What information do we have, and which do we need to import:
    # center to Initialize

      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":faction"),
      (store_script_param, ":town_lord", 3),

      
# chest troop
    (try_begin),
      (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
      (party_slot_eq, ":center_no", slot_party_type, spt_castle),
      (assign, ":end_cond", trp_castle_1_seneschal),
      (try_for_range, ":cur_object_no", trp_town_1_seneschal, ":end_cond"),
        (party_slot_eq, ":cur_object_no", slot_trp_is_active, 0),   
        (party_set_slot, ":center_no", slot_town_seneschal, ":cur_object_no"),
        (troop_set_slot, ":cur_object_no", slot_trp_is_active, 1),
        (assign, ":end_cond", ":cur_object_no"),        #break   
      (try_end),
    (try_end),
      
	  (try_begin),
      (party_slot_eq, ":center_no", slot_party_type, spt_town),
      (try_for_range, ":item_no", trade_goods_begin, trade_goods_end),
        (store_sub, ":offset", ":item_no", trade_goods_begin),
        (val_add, ":offset", slot_town_trade_good_prices_begin),
        (try_for_range, ":center_no", centers_begin, centers_end),
          (party_set_slot, ":center_no", ":offset", average_price_factor), #1000
        (try_end),
      (try_end),     
    (try_end),  
 
	  # fill_village_bound_centers
     (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_village),        
        (assign, ":min_dist", 999999),
        (assign, ":min_dist_town", -1),
        (try_for_range, ":cur_town", towns_begin, towns_end),
          (store_distance_to_party_from_party, ":cur_dist", ":center_no", ":cur_town"),
          (lt, ":cur_dist", ":min_dist"),
          (assign, ":min_dist", ":cur_dist"),
          (assign, ":min_dist_town", ":cur_town"),
        (try_end),
        (party_set_slot, ":center_no", slot_village_bound_center, ":min_dist_town"),
      (try_end),
      (try_begin),
       (party_slot_eq, ":center_no", slot_party_no, spt_town),
       (assign, ":end_cond", mayors_end),
        (try_for_range, ":free_mayor", mayors_begin, ":end_cond"),
          (troop_slot_eq, ":free_mayor", slot_trp_is_active, 0),        # Since we assign all troops at the same time, if mayor 25 is unused, all other 25th troops should be unused as well. Should be always true. So realistically, setting trp_is_active for other troops is not required, however, just do it for safety. Though we never check for it, yet.
          (store_sub, ":offset", ":free_mayor", mayors_begin),
          (store_add, ":cur_object_no", "trp_town_1_mayor", ":offset"),
          (party_set_slot,":center_no", slot_town_elder, ":cur_object_no"),
          (troop_set_slot, ":cur_object_no", slot_trp_is_active, 1),
          (store_add, ":cur_object_no", "trp_town_1_tavernkeeper", ":offset"),
          (party_set_slot,":center_no", slot_town_tavernkeeper, ":cur_object_no"),
          (troop_set_slot, ":cur_object_no", slot_trp_is_active, 1),
          (store_add, ":cur_object_no", "trp_town_1_weaponsmith", ":offset"),
          (party_set_slot,":center_no", slot_town_weaponsmith, ":cur_object_no"),
          (troop_set_slot, ":cur_object_no", slot_trp_is_active, 1),
          (store_add, ":cur_object_no", "trp_town_1_armorer", ":offset"),
          (party_set_slot,":center_no", slot_town_armorer, ":cur_object_no"),
          (troop_set_slot, ":cur_object_no", slot_trp_is_active, 1),
          (store_add, ":cur_object_no", "trp_town_1_merchant", ":offset"),
          (party_set_slot,":center_no", slot_town_merchant, ":cur_object_no"),
          (troop_set_slot, ":cur_object_no", slot_trp_is_active, 1),
          (store_add, ":cur_object_no", "trp_town_1_horse_merchant", ":offset"),
          (party_set_slot,":center_no", slot_town_horse_merchant, ":cur_object_no"),
          (troop_set_slot, ":cur_object_no", slot_trp_is_active, 1),
          (store_add, ":cur_object_no", "scn_town_1_center", ":offset"),
          (party_set_slot,":center_no", slot_town_center, ":cur_object_no"),    #F&B Check Can we use this multiple times? 
          (assign, ":end_cond", ":free_mayor"),   #break 
        (try_end),
      ######## Here we assign all scenes required for a town
        (store_random_in_range, ":offset", 1, 22),  #22 towns, picks random scenes for now. Gonna improve later on
        (store_add, ":cur_object_no", "scn_town_1_center", ":offset"),
        (party_set_slot,":center_no", slot_town_center, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_castle", ":offset"),
        (party_set_slot,":center_no", slot_town_castle, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_prison", ":offset"),
        (party_set_slot,":center_no", slot_town_prison, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_walls", ":offset"),
        (party_set_slot,":center_no", slot_town_walls, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_tavern", ":offset"),
        (party_set_slot,":center_no", slot_town_tavern, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_store", ":offset"),
        (party_set_slot,":center_no", slot_town_store, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_arena", ":offset"),
        (party_set_slot,":center_no", slot_town_arena, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_alley", ":offset"),
        (party_set_slot,":center_no", slot_town_alley, ":cur_object_no"), 
        (party_set_slot,":center_no", slot_town_reinforcement_party_template, "pt_center_reinforcements"),  
        #Check, whether town needs to be besieged with belfry
        (try_begin),              #F&B check. If we messed up, we are off by 1 
          (this_or_next|eq, ":offset", 12),
          (eq, ":offset", 15),
          (party_set_slot, ":center_no", slot_center_siege_with_belfry, 1),
        (try_end),
        (party_set_slot, ":center_no", slot_center_last_spotted_enemy, -1),
        (party_set_slot, ":center_no", slot_center_is_besieged_by, -1),
        (party_set_slot, ":center_no", slot_center_last_taken_by_troop, -1),
        (call_script, "script_initialize_town_arena_info_dynamic", ":center_no", ":offset"),
        ##diplomacy start+ Set the home slots for town merchants, elders, etc. for reverse-lookup
        (try_for_range, ":offset", dplmc_slot_town_merchants_begin, dplmc_slot_town_merchants_end),
           (party_get_slot, ":npc", ":center_no", ":offset"),
           (gt, ":npc", 0),
           (neg|troop_slot_ge, ":npc", slot_troop_home, 1),#If the startup script wasn't altered by another mod, we don't have to worry about this condition.
           (troop_set_slot, ":npc", slot_troop_home, ":center_no"),
        (try_end),
      (try_end),  
	    (try_begin),
         (party_slot_eq, ":center_no", slot_party_type, spt_castle),
         (store_random_in_range, ":castle_no", "p_castle_1", "p_village_1"),
         (store_sub, ":offset", ":castle_no", "p_castle_1"),
         (assign, ":offset_orig", ":offset"),
         (val_mul, ":offset", 3),    #F&B Check no idea, why this mul by 3 is used.
         (store_add, ":exterior_scene_no", "scn_castle_1_exterior", ":offset"),
         (party_set_slot,":center_no", slot_castle_exterior, ":exterior_scene_no"),
         (store_add, ":interior_scene_no", "scn_castle_1_interior", ":offset"),
         (party_set_slot,":center_no", slot_town_castle, ":interior_scene_no"),
         (store_add, ":interior_scene_no", "scn_castle_1_prison", ":offset"),
         (party_set_slot,":center_no", slot_town_prison, ":interior_scene_no"),
         (party_set_slot,":center_no", slot_town_reinforcement_party_template, "pt_center_reinforcements"),
         (party_set_slot,":center_no", slot_party_type, spt_castle),
         (party_set_slot,":center_no", slot_center_is_besieged_by, -1),
         (store_random_in_range, ":rand_castle_icon", "icon_castle_derchios", "icon_castle_weyyah"),
         (party_set_icon, ":center_no", ":rand_castle_icon"), 
               # Check, whether castle needs to be sieged with belfry
         (try_begin),
             (this_or_next|eq, ":offset_orig", 0),
             (this_or_next|eq, ":offset_orig", 1),
             (this_or_next|eq, ":offset_orig", 3),
             (this_or_next|eq, ":offset_orig", 6),
             (this_or_next|eq, ":offset_orig", 7),
             (this_or_next|eq, ":offset_orig", 8),
             (this_or_next|eq, ":offset_orig", 10),
             (this_or_next|eq, ":offset_orig", 12),
             (this_or_next|eq, ":offset_orig", 20),
             (this_or_next|eq, ":offset_orig", 24),
             (this_or_next|eq, ":offset_orig", 33),
             (this_or_next|eq, ":offset_orig", 34),
             (this_or_next|eq, ":offset_orig", 37),
             (this_or_next|eq, ":offset_orig", 39),
             (this_or_next|eq, ":offset_orig", 40),
             (this_or_next|eq, ":offset_orig", 41),
             (eq, ":offset_orig", 42),
             (party_set_slot, ":center_no", slot_center_siege_with_belfry, 1),   
         (try_end),  
      (try_end),
      (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_village),
          (party_get_current_terrain, ":terrain", ":center_no"),
          (try_begin),
            (eq, ":terrain", 4), #snow terrain
            (party_set_icon, ":center_no", "icon_village_snow_a"),
            (store_random_in_range, ":exterior_scene_no", "scn_village_78", "scn_village_91"),
            (store_sub, ":offset", ":exterior_scene_no", "scn_village_78"),
            (store_add, ":exterior_scene_no", "scn_village_78", ":offset"),
            (party_set_slot,":center_no", slot_castle_exterior, ":exterior_scene_no"),          
        (else_try),
            (eq, ":terrain", 5), # desert terrain
            (party_set_icon, ":center_no", "icon_village_c"),
            (store_random_in_range, ":exterior_scene_no", "scn_village_91", "scn_village_110"), #could be scn_village_110 +1
            (store_sub, ":offset", ":exterior_scene_no", "scn_village_91"),
            (store_add, ":exterior_scene_no", "scn_village_91", ":offset"),
            (party_set_slot,":center_no", slot_castle_exterior, ":exterior_scene_no"),   
        (else_try),      # all other terrain
            (party_set_icon, ":center_no", "icon_village_a"),
            (store_random_in_range, ":exterior_scene_no", "scn_village_1", "scn_village_78"),
            (store_sub, ":offset", ":exterior_scene_no", "scn_village_1"),
            (store_add, ":exterior_scene_no", "scn_village_1", ":offset"),
            (party_set_slot,":center_no", slot_castle_exterior, ":exterior_scene_no"),         
        (try_end),
        (assign, ":end_cond", village_elders_end),
        (try_for_range, ":new_elder", village_elders_begin, ":end_cond"),
            (neg|troop_slot_eq, ":new_elder", slot_trp_is_active, 1),
            (party_set_slot, ":center_no", slot_town_elder, ":new_elder"),
            (troop_set_slot, ":new_elder", slot_trp_is_active, 1),
            (assign, ":end_cond", ":new_elder"),               
        (try_end),
        (party_set_slot,":center_no", slot_village_raided_by, -1),
        
        (call_script, "script_start_refresh_village_defenders", ":center_no"),
        (call_script, "script_start_refresh_village_defenders", ":center_no"),
        (call_script, "script_start_refresh_village_defenders", ":center_no"),
        (call_script, "script_start_refresh_village_defenders", ":center_no"),
      (try_end),
      (party_set_slot, ":center_no", slot_center_last_spotted_enemy, -1),
      (party_set_slot, ":center_no", slot_center_is_besieged_by, -1),
      (party_set_slot, ":center_no", slot_center_last_taken_by_troop, -1),
        ##diplomacy start+ Set the home slots for town merchants, elders, etc. for reverse-lookup
      (try_for_range, ":offset", dplmc_slot_town_merchants_begin, dplmc_slot_town_merchants_end),   #F&B check not quite sure, what this does
           (party_get_slot, ":npc", ":center_no", ":offset"),
           (gt, ":npc", 0),
           (neg|troop_slot_ge, ":npc", slot_troop_home, 1),#If the startup script wasn't altered by another mod, we don't have to worry about this condition.
           (troop_set_slot, ":npc", slot_troop_home, ":center_no"),
      (try_end),
        ##diplomacy end+
      (add_party_note_tableau_mesh, ":center_no", "tableau_center_note_mesh"),  
      (try_begin),
          (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
          (party_slot_eq, ":center_no", slot_party_type, spt_castle),
          (call_script, "script_give_center_fo_faction_aux", ":center_no", ":faction"),
          (call_script, "script_start_give_center_to_lord", ":center_no", ":town_lord", 0),  
      (try_end),
      (assign, ":original_faction", ":faction"),      ,
      (faction_get_slot, ":culture", ":original_faction", slot_faction_culture),
      (party_set_slot, ":center_no", slot_center_culture,  ":culture"),
      (party_set_slot, ":center_no", slot_center_original_faction,  ":original_faction"),
      (party_set_slot, ":center_no", slot_center_ex_faction,  ":original_faction"),
      (try_begin),
       (eq, ":town_lord", "trp_player"),
       #Use trp_kingdom_heroes_including_player_begin instead of trp_player as a workaround for
       #old saved games (since uninitialized memory is 0).
       (party_set_slot, ":center_no", dplmc_slot_center_ex_lord, "trp_kingdom_heroes_including_player_begin"),
       (troop_slot_eq, "trp_player", slot_troop_home, ":center_no"),
       (neg|party_slot_ge, ":center_no", dplmc_slot_center_original_lord, 1),
       (party_set_slot, ":center_no", dplmc_slot_center_original_lord, "trp_kingdom_heroes_including_player_begin"),
      (else_try),
       (party_set_slot, ":center_no", dplmc_slot_center_ex_lord, ":town_lord"),
       (ge, ":town_lord", 0),
       (troop_slot_eq, ":town_lord", slot_troop_home, ":center_no"),
       (neg|party_slot_ge, ":center_no", dplmc_slot_center_original_lord, 1),
       (party_set_slot, ":center_no", dplmc_slot_center_original_lord, ":town_lord"),
      (try_end),
      #Initialize walkers
      (try_for_range, ":center_no", centers_begin, centers_end),
        (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
        (party_slot_eq, ":center_no", slot_party_type, spt_village),
        (try_for_range, ":walker_no", 0, num_town_walkers),
          (call_script, "script_center_set_walker_to_type", ":center_no", ":walker_no", walkert_default),
        (try_end),
      (try_end),
    #  (call_script, "script_update_village_market_towns"),
    #  (call_script, "script_initialize_economic_information"),   #F&B check. This is majorly important. Need to write a modified script for this.
      (try_begin),
        (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),        
        (assign, ":garrison_strength", 15),
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_town),
          (assign, ":garrison_strength", 40),
        (try_end),
        (try_for_range, ":unused", 0, ":garrison_strength"),
          (call_script, "script_cf_reinforce_party", ":center_no"),
        (try_end),
      (try_end),
      (party_set_slot, ":center_no", slot_town_player_odds, 1000),
       ##Initialize town "last caravan arrived" times randomly
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_no, spt_town),        
        (try_for_range, ":cur_slot", dplmc_slot_town_trade_route_last_arrivals_begin, dplmc_slot_town_trade_route_last_arrivals_end),
          (party_slot_eq, ":center_no", ":cur_slot", 0),
          (store_random_in_range, ":last_arrived", 1, (24 * 7 * 5) + 1),#some time in the last five weeks
          (val_mul, ":last_arrived", -1),     
          (party_get_slot, ":prosperity_factor", ":center_no", slot_town_prosperity),#modify plus or minus 40% based on prosperity
          (val_clamp, ":prosperity_factor", 0, 101),
          (val_add, ":prosperity_factor", 75),
          (val_mul, ":last_arrived", 125),
          (val_div, ":last_arrived", ":prosperity_factor"),#last arrival some time in the last five weeks, plus or minus 40%
          (party_set_slot, ":center_no", ":cur_slot", ":last_arrived"),
        (try_end),
      (try_end),
      (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_village),          
          (party_get_slot, ":prosperity_factor", ":center_no", slot_town_prosperity),#modify plus or minus 40% based on prosperity
          (val_clamp, ":prosperity_factor", 0, 101),
          (val_add, ":prosperity_factor", 75),#average 125, min 75, max 175          
          (store_random_in_range, ":last_arrived", 1, (24 * 7) + 1),
          (val_mul, ":last_arrived", -1),#some time in the last 7 days, plus or minus 40%
          (val_mul, ":last_arrived", 125),
          (val_div, ":last_arrived", ":prosperity_factor"),
          (party_set_slot, ":center_no", dplmc_slot_village_trade_last_returned_from_market, ":last_arrived"),
          (store_random_in_range, ":last_arrived", 1, (24 * 7) + 1),
          (val_mul, ":last_arrived", -1),#some time in the last 7 days
          (val_mul, ":last_arrived", 125),
          (val_div, ":last_arrived", ":prosperity_factor"),
          (party_set_slot, ":center_no", dplmc_slot_village_trade_last_arrived_to_market, ":last_arrived"),
      (try_end),
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_town),        
        (call_script, "script_center_get_food_store_limit", ":center_no"),
        (assign, ":food_store_limit", reg0),
        (val_div, ":food_store_limit", 4),      
        (party_set_slot, ":center_no", slot_party_food_store, ":food_store_limit"),       #give town some food
      (try_end),
      (try_begin), 
        (party_slot_eq, ":center_no", slot_party_type, spt_town),        
        (store_random_in_range, ":troop_no", town_specialist_begin, town_specialist_end),
        (party_set_slot, ":center_no", slot_center_specialist_type, ":troop_no"),
        (store_random_in_range, ":amount", 1, 3),
        (party_set_slot, ":center_no", slot_center_specialist_amount, ":amount"),       
      (else_try),
        (party_slot_eq, ":center_no", slot_party_type, spt_village),        
        (store_random_in_range, ":troop_no", village_specialist_begin, village_specialist_end),
        (party_set_slot, ":center_no", slot_center_specialist_type, ":troop_no"),
        (store_random_in_range, ":amount", 1, 3),
        (party_set_slot, ":center_no", slot_center_specialist_amount, ":amount"),       
      (else_try),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (store_random_in_range, ":troop_no", castle_specialist_begin, castle_specialist_end),
        (party_set_slot, ":center_no", slot_center_specialist_type, ":troop_no"),
        (store_random_in_range, ":amount", 1, 3),
        (party_set_slot, ":center_no", slot_center_specialist_amount, ":amount"),         
      (try_end),
	  #############################################
		#############################################